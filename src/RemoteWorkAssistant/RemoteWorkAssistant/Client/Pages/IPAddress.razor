@page "/ipaddress"
@using RemoteWorkAssistant.Shared.Dto
@using System.Text
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<h1>IP Address</h1>

<h2>IPアドレス確認</h2>

<div>
    <p>メールアドレス: <input type="text" @bind="mailAddress" placeholder="address@example.com" /></p>
    <p>パスワード: <input type="password" @bind="password" /></p>
    <button class="btn btn-primary" @onclick="GetIpAddress">IPアドレス情報取得</button>
</div>

@if (ipAddressList != null)
{
    @foreach (Tuple<string, List<string>, string> pc in ipAddressList)
    {
        <div class="cp_actab">
            <input id="tab-@pc.Item1" type="checkbox"/>
            <label for="tab-@pc.Item1">@pc.Item1</label>
            <div class="cp_actab-content">
                @if (pc.Item2 == null)
                {
                    <p>データなし</p>
                }
                else
                {
                    <p>更新日時：@pc.Item3</p>
                    <p>
                        @foreach (string ia in pc.Item2)
                        {
                            @ia<br />
                        }
                    </p>
                }
            </div>
        </div>
    }
}

@code {
    private string mailAddress;
    private string password;
    /// <summary>PC名称, IPアドレス, 更新日時のリスト</summary>
    private List<Tuple<string, List<string>, string>> ipAddressList;

    private readonly string GET_IPADDRESS_URI = "api/v1/pc/ipaddress/get";

    private async void GetIpAddress()
    {
        IpAddressGetReq reqBodyObj = new IpAddressGetReq
        {
            MailAddress = this.mailAddress,
            Password = this.password
        };
        StringContent reqBody = new StringContent(JsonSerializer.Serialize(reqBodyObj), Encoding.UTF8, @"application/json");
        HttpResponseMessage response = await Http.PutAsync(this.GET_IPADDRESS_URI, reqBody);

        // レスポンス異常時
        if (!response.IsSuccessStatusCode)
        {
            string respErrorJson = await response.Content.ReadAsStringAsync();
            Error error = JsonSerializer.Deserialize<Error>(respErrorJson);

            StringBuilder sb = new StringBuilder("取得結果: ").Append(response.StatusCode.ToString());
            sb.Append("\r\n詳細: ").Append(error.Message);
            await JsRuntime.InvokeVoidAsync("alert", sb.ToString());
            return;
        }

        // 正常時
        string respJson = await response.Content.ReadAsStringAsync();
        IpAddressGetResp resp = JsonSerializer.Deserialize<IpAddressGetResp>(respJson);
        this.ipAddressList = new List<Tuple<string, List<string>, string>>();
        foreach (PcInfo pi in resp.PcData)
        {
            List<string> ipaddress;
            if (!string.IsNullOrEmpty(pi.IpAddress))
            {
                ipaddress = pi.IpAddress.Split("\r\n").ToList();
            }
            else
            {
                ipaddress = null;
            }
            Tuple<string, List<string>, string> element = new Tuple<string, List<string>, string>(
                pi.PcName, ipaddress, pi.UpdatedDateTime);
            ipAddressList.Add(element);
        }
        this.StateHasChanged();
    }
}
